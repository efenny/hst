// Mixin Style Sheet
/*************************
MEDIA QUERY (MQ)
*************************/
@import "breakpoint";

/*************************
MEDIA QUERY (MQ)
*************************/

@mixin dark-mode {
  :root {
    &[data-theme="dark"] {
      @content;
    }
  }
}

@mixin button-wrapper {
  .buttons-wrapper {
    display: flex;
    align-items: flex-start;
    justify-content: flex-start;
    flex-direction: column;

    .button {
      margin-top: 1.15rem !important;

      &:first-child {
        margin-top: 2rem !important;
      }
    }
  }
}

@mixin box-shadow {
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);
}

@mixin box-shadow-light-hover {
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.039);
  transition: $transition;

  &:hover {
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.16);
  }
}

@mixin box-shadow-dark-hover {
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);
  transition: $transition;

  &:hover {
    box-shadow: 0 3px 12px rgba(0, 0, 0, 0.4);
  }
}

@mixin font-size($desktop, $laptop, $tablet, $mobile) {
  font-size: $desktop;

  @include breakpoint($laptop-break) {
    font-size: $laptop;
  }

  @include breakpoint($tablet-break) {
    font-size: $tablet;
  }

  @include breakpoint($mobile-break) {
    font-size: $mobile;
  }
}

@mixin line-height($desktop, $laptop, $tablet, $mobile) {
  line-height: $desktop;

  @include breakpoint($laptop-break) {
    line-height: $laptop;
  }

  @include breakpoint($tablet-break) {
    line-height: $tablet;
  }

  @include breakpoint($mobile-break) {
    line-height: $mobile;
  }
}

@mixin bg-cover {
  background-size: cover;
  background-position: center;
}

@mixin bg-contain {
  background-size: contain;
  background-position: center;
}

@function row-item-width($columns, $gutter) {
  @return calc(#{100% / $columns} - #{($gutter * ($columns - 1)) / $columns});
}

@mixin row-item-grid($columns, $gutter-col, $gutter-row: null) {
  width: row-item-width($columns, $gutter-col);
  margin-right: 0;

  // add a right margin to create the gutter
  @for $i from 1 through $columns - 1 {
    &:nth-child(#{$columns}n + #{$i}) {
      margin-right: $gutter-col;
    }
  }

  // Check if the gutter row gap arguement has been passed
  @if ($gutter-row) {
    &:nth-child(n) {
      margin-bottom: $gutter-row;
    }
  } @else {
    // if not then jusdt default to the gutter column gap
    $gutter-row: $gutter-col;
    &:nth-child(n) {
      margin-bottom: $gutter-row;
    }
  }

  // remove the bottom margin from the bottom row
  @for $j from 1 through $columns {
    &:nth-last-child(#{$j}) {
      margin-bottom: 0;
    }
  }

  // remove right margin from elements that don't need it
  &:nth-child(#{$columns}n + #{$columns}) {
    margin-right: 0;
  }
}
